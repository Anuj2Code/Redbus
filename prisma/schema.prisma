// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String         @id
  email              String         @unique
  firstName          String
  lastName           String
  imageUrl           String?
  userName           String?        @unique
  createdAt          DateTime       @default(now())
  createdSubbreddits Subbreddits[]  @relation("CreatedBy")
  posts              Post[]
  Subscription       Subscription[]
  Vote               Vote[]
  comment            Comment[]
  CommentVote        CommentVote[]
  save save[]
}

model Subbreddits {
  id          String         @id @default(uuid())
  name        String         @unique
  createdAt   DateTime       @default(now())
  description String?
  updatedAt   DateTime       @updatedAt
  User        User           @relation("CreatedBy", fields: [userId], references: [id])
  userId      String
  posts       Post[]
  Subscribers Subscription[]
}

model Post {
  id          String       @id @default(uuid())
  title       String
  textContent String?
  imageString String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Subbreddits Subbreddits? @relation(fields: [subName], references: [name])
  subName     String?
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
  Vote        Vote[]
  comments    Comment[]
  save save[]
}

model Subscription {
  id          String      @id @default(uuid())
  User        User        @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subbreddits @relation(fields: [subRedditId], references: [id])
  subRedditId String
}

enum TypeOfVote {
  UP
  DOWN
}

model Vote {
  id       String     @id @default(uuid())
  Post     Post?      @relation(fields: [postId], references: [id])
  postId   String
  User     User?      @relation(fields: [userId], references: [id])
  userId   String
  voteType TypeOfVote
}

model Comment {
  id        String         @id @default(uuid())
  text      String
  createdAt DateTime       @default(now())
  User      User           @relation(fields: [userId], references: [id])
  userId    String
  Post      Post           @relation(fields: [postId], references: [id])
  postId    String
  replyTo   Comment?       @relation("Reply To", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyId   String?
  replies   Comment[]      @relation("Reply To")
  votes     CommentVote[]
  reply     commentReply[]
}

model CommentVote {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  voteType  TypeOfVote
  reply     commentReply[]
}

model commentReply {
  id          String        @id @default(uuid())
  text        String
  createdAt   DateTime      @default(now())
  userName    String
  imageString String?
  Comment     Comment       @relation(fields: [commentId], references: [id])
  commentId   String
  votes       CommentVote[]
}

model save {
  id     String @id @default(uuid())
  User   User   @relation(fields: [userId], references: [id])
  userId String
  Post   Post   @relation(fields: [postId], references: [id])
  postId String
}
